---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Othello AI application infrastructure'
Parameters:
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: myKey

  CIDRForSSH:
    Description: 'CIDR allowed to ssh'
    Type: 'String'
    Default: '0.0.0.0/0'

  DBPassword:
    Description: 'Database password'
    Type: 'String'
    Default: 'dbpassword'


Resources:

### Network ###
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  VMSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.56.0/24'
      VpcId: !Ref VPC

  VMSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.57.0/24'
      VpcId: !Ref VPC

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VMSubnet1
      RouteTableId: !Ref RouteTable

  RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref VMSubnet2
      RouteTableId: !Ref RouteTable

  RoutePublicSubnetToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: 
      - VPCGatewayAttachment


### Load balancer ###
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Subnets:
        - Ref: VMSubnet1
        - Ref: VMSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: 'internet-facing'
    DependsOn: VPCGatewayAttachment

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/othello/isBusy'
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref WebServer1
          Port: 80
        - Id: !Ref WebServer2
          Port: 80
      VpcId: !Ref VPC

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Load balancer security group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: '202.215.72.251/32'
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80


### Web server ###
  WebServer1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-09d28faae2e9e7138'
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref VMSubnet1
          DeviceIndex: '0'
          GroupSet:
            - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
        - Value: 'othelloApp.WebServerInstance1'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          yum -y update
          
          # web server setup
          curl -s https://raw.githubusercontent.com/E-Kohei/tmpAWS/main/othello-server/webserver-setup.sh | bash -ex
          
          # create database for django application
          # this operation is done by either of the two machines
          yum -y install mysql-community-client
          while ! nc -z ${Database.Endpoint.Address} 3306; do sleep 10; done
          sleep 10
          mysql --user=ekohei --host=${Database.Endpoint.Address} --password=${DBPassword} --database=othello --execute="CREATE TABLE records (id INTEGER PRIMARY KEY AUTO_INCREMENT, date_time CHAR(20) NOT NULL, dark_player VARCHAR(11) NOT NULL, light_player VARCHAR(11) NOT NULL, dark_score SMALLINT NOT NULL, light_score SMALLINT NOT NULL, moves VARCHAR(250) NOT NULL);"
          
          # Notify CloudFormation that the script ended
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer1 --region ${AWS::Region}
    DependsOn:
      - VPCGatewayAttachment

  WebServer2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-09d28faae2e9e7138'
      InstanceType: 't2.micro'
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref VMSubnet2
          DeviceIndex: '0'
          GroupSet:
            - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
        - Value: 'othelloApp.WebServerInstance2'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          yum -y update
          
          # web server setup
          curl -s https://raw.githubusercontent.com/E-Kohei/tmpAWS/main/othello-server/webserver-setup.sh | bash -ex
          
          # Notify CloudFormation that the script ended
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer2 --region ${AWS::Region}
    DependsOn:
      - VPCGatewayAttachment
  
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'web server security group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Sub ${CIDRForSSH}
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: tcp 
          FromPort: 80
          ToPort: 80


### Database ###
  Database:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: '5'
      BackupRetentionPeriod: 0
      DBInstanceClass: 'db.t2.micro'
      DBName: othello
      Engine: MySQL
      MasterUsername: ekohei
      MasterUserPassword: !Sub ${DBPassword}
      VPCSecurityGroups:
        - !Sub ${DatabaseSecurityGroup.GroupId}
      DBSubnetGroupName: !Ref DBSubnetGroup
      Tags:
        - Key: Name
        - Value: 'othelloApp.DBInstance'
    DependsOn: VPCGatewayAttachment

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'DB subnet group'
      SubnetIds:
        - Ref: VMSubnet1
        - Ref: VMSubnet2

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'database security group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref WebServerSecurityGroup
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306



Outputs:
  LoadBalancerURL:
    Value: !Sub 'http://${LoadBalancer.DNSName}'
    Description: 'Othello app URL'
  WebServerIPAddress1:
    Value: !Sub '${WebServer1.PublicIp}'
    Description: 'Dns name of web server 1 for ssh'
  WebServerIPAddress2:
    Value: !Sub '${WebServer2.PublicIp}'
    Description: 'Dns name of web server 2 for ssh'
  DatabasePrivateURL:
    Value: !Sub '${Database.Endpoint.Address}'

